/*
Copyright 2017 caicloud authors. All rights reserved.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/release/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GrayReleaseLister helps list GrayReleases.
type GrayReleaseLister interface {
	// List lists all GrayReleases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GrayRelease, err error)
	// GrayReleases returns an object that can list and get GrayReleases.
	GrayReleases(namespace string) GrayReleaseNamespaceLister
	GrayReleaseListerExpansion
}

// grayReleaseLister implements the GrayReleaseLister interface.
type grayReleaseLister struct {
	indexer cache.Indexer
}

// NewGrayReleaseLister returns a new GrayReleaseLister.
func NewGrayReleaseLister(indexer cache.Indexer) GrayReleaseLister {
	return &grayReleaseLister{indexer: indexer}
}

// List lists all GrayReleases in the indexer.
func (s *grayReleaseLister) List(selector labels.Selector) (ret []*v1alpha1.GrayRelease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GrayRelease))
	})
	return ret, err
}

// GrayReleases returns an object that can list and get GrayReleases.
func (s *grayReleaseLister) GrayReleases(namespace string) GrayReleaseNamespaceLister {
	return grayReleaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GrayReleaseNamespaceLister helps list and get GrayReleases.
type GrayReleaseNamespaceLister interface {
	// List lists all GrayReleases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GrayRelease, err error)
	// Get retrieves the GrayRelease from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GrayRelease, error)
	GrayReleaseNamespaceListerExpansion
}

// grayReleaseNamespaceLister implements the GrayReleaseNamespaceLister
// interface.
type grayReleaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GrayReleases in the indexer for a given namespace.
func (s grayReleaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GrayRelease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GrayRelease))
	})
	return ret, err
}

// Get retrieves the GrayRelease from the indexer for a given namespace and name.
func (s grayReleaseNamespaceLister) Get(name string) (*v1alpha1.GrayRelease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("grayrelease"), name)
	}
	return obj.(*v1alpha1.GrayRelease), nil
}
