/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/tenant/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePartitions implements PartitionInterface
type FakePartitions struct {
	Fake *FakeTenantV1alpha1
}

var partitionsResource = schema.GroupVersionResource{Group: "tenant.caicloud.io", Version: "v1alpha1", Resource: "partitions"}

var partitionsKind = schema.GroupVersionKind{Group: "tenant.caicloud.io", Version: "v1alpha1", Kind: "Partition"}

// Get takes name of the partition, and returns the corresponding partition object, and an error if there is any.
func (c *FakePartitions) Get(name string, options v1.GetOptions) (result *v1alpha1.Partition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(partitionsResource, name), &v1alpha1.Partition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Partition), err
}

// List takes label and field selectors, and returns the list of Partitions that match those selectors.
func (c *FakePartitions) List(opts v1.ListOptions) (result *v1alpha1.PartitionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(partitionsResource, partitionsKind, opts), &v1alpha1.PartitionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PartitionList{}
	for _, item := range obj.(*v1alpha1.PartitionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested partitions.
func (c *FakePartitions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(partitionsResource, opts))
}

// Create takes the representation of a partition and creates it.  Returns the server's representation of the partition, and an error, if there is any.
func (c *FakePartitions) Create(partition *v1alpha1.Partition) (result *v1alpha1.Partition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(partitionsResource, partition), &v1alpha1.Partition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Partition), err
}

// Update takes the representation of a partition and updates it. Returns the server's representation of the partition, and an error, if there is any.
func (c *FakePartitions) Update(partition *v1alpha1.Partition) (result *v1alpha1.Partition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(partitionsResource, partition), &v1alpha1.Partition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Partition), err
}

// Delete takes name of the partition and deletes it. Returns an error if one occurs.
func (c *FakePartitions) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(partitionsResource, name), &v1alpha1.Partition{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePartitions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(partitionsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.PartitionList{})
	return err
}

// Patch applies the patch and returns the patched partition.
func (c *FakePartitions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Partition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(partitionsResource, name, data, subresources...), &v1alpha1.Partition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Partition), err
}
