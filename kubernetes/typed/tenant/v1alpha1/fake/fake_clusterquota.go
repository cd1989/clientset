/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/tenant/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterQuotas implements ClusterQuotaInterface
type FakeClusterQuotas struct {
	Fake *FakeTenantV1alpha1
}

var clusterquotasResource = schema.GroupVersionResource{Group: "tenant.caicloud.io", Version: "v1alpha1", Resource: "clusterquotas"}

var clusterquotasKind = schema.GroupVersionKind{Group: "tenant.caicloud.io", Version: "v1alpha1", Kind: "ClusterQuota"}

// Get takes name of the clusterQuota, and returns the corresponding clusterQuota object, and an error if there is any.
func (c *FakeClusterQuotas) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterquotasResource, name), &v1alpha1.ClusterQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterQuota), err
}

// List takes label and field selectors, and returns the list of ClusterQuotas that match those selectors.
func (c *FakeClusterQuotas) List(opts v1.ListOptions) (result *v1alpha1.ClusterQuotaList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterquotasResource, clusterquotasKind, opts), &v1alpha1.ClusterQuotaList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterQuotaList{}
	for _, item := range obj.(*v1alpha1.ClusterQuotaList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterQuotas.
func (c *FakeClusterQuotas) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterquotasResource, opts))
}

// Create takes the representation of a clusterQuota and creates it.  Returns the server's representation of the clusterQuota, and an error, if there is any.
func (c *FakeClusterQuotas) Create(clusterQuota *v1alpha1.ClusterQuota) (result *v1alpha1.ClusterQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusterquotasResource, clusterQuota), &v1alpha1.ClusterQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterQuota), err
}

// Update takes the representation of a clusterQuota and updates it. Returns the server's representation of the clusterQuota, and an error, if there is any.
func (c *FakeClusterQuotas) Update(clusterQuota *v1alpha1.ClusterQuota) (result *v1alpha1.ClusterQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusterquotasResource, clusterQuota), &v1alpha1.ClusterQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterQuota), err
}

// Delete takes name of the clusterQuota and deletes it. Returns an error if one occurs.
func (c *FakeClusterQuotas) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(clusterquotasResource, name), &v1alpha1.ClusterQuota{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterQuotas) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusterquotasResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterQuotaList{})
	return err
}

// Patch applies the patch and returns the patched clusterQuota.
func (c *FakeClusterQuotas) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusterquotasResource, name, data, subresources...), &v1alpha1.ClusterQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterQuota), err
}
