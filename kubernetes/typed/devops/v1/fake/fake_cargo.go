/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	devops_v1 "github.com/caicloud/clientset/pkg/apis/devops/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCargos implements CargoInterface
type FakeCargos struct {
	Fake *FakeDevopsV1
	ns   string
}

var cargosResource = schema.GroupVersionResource{Group: "devops.caicloud.io", Version: "v1", Resource: "cargos"}

var cargosKind = schema.GroupVersionKind{Group: "devops.caicloud.io", Version: "v1", Kind: "Cargo"}

// Get takes name of the cargo, and returns the corresponding cargo object, and an error if there is any.
func (c *FakeCargos) Get(name string, options v1.GetOptions) (result *devops_v1.Cargo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(cargosResource, c.ns, name), &devops_v1.Cargo{})

	if obj == nil {
		return nil, err
	}
	return obj.(*devops_v1.Cargo), err
}

// List takes label and field selectors, and returns the list of Cargos that match those selectors.
func (c *FakeCargos) List(opts v1.ListOptions) (result *devops_v1.CargoList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(cargosResource, cargosKind, c.ns, opts), &devops_v1.CargoList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &devops_v1.CargoList{}
	for _, item := range obj.(*devops_v1.CargoList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cargos.
func (c *FakeCargos) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(cargosResource, c.ns, opts))

}

// Create takes the representation of a cargo and creates it.  Returns the server's representation of the cargo, and an error, if there is any.
func (c *FakeCargos) Create(cargo *devops_v1.Cargo) (result *devops_v1.Cargo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(cargosResource, c.ns, cargo), &devops_v1.Cargo{})

	if obj == nil {
		return nil, err
	}
	return obj.(*devops_v1.Cargo), err
}

// Update takes the representation of a cargo and updates it. Returns the server's representation of the cargo, and an error, if there is any.
func (c *FakeCargos) Update(cargo *devops_v1.Cargo) (result *devops_v1.Cargo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(cargosResource, c.ns, cargo), &devops_v1.Cargo{})

	if obj == nil {
		return nil, err
	}
	return obj.(*devops_v1.Cargo), err
}

// Delete takes name of the cargo and deletes it. Returns an error if one occurs.
func (c *FakeCargos) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(cargosResource, c.ns, name), &devops_v1.Cargo{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCargos) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(cargosResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &devops_v1.CargoList{})
	return err
}

// Patch applies the patch and returns the patched cargo.
func (c *FakeCargos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *devops_v1.Cargo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(cargosResource, c.ns, name, data, subresources...), &devops_v1.Cargo{})

	if obj == nil {
		return nil, err
	}
	return obj.(*devops_v1.Cargo), err
}
