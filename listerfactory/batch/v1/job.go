/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by listerfactory-gen. DO NOT EDIT.

package v1

import (
	internalinterfaces "github.com/caicloud/clientset/listerfactory/internalinterfaces"
	batch_v1 "k8s.io/api/batch/v1"
	core_v1 "k8s.io/api/core/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	kubernetes "k8s.io/client-go/kubernetes"
	v1 "k8s.io/client-go/listers/batch/v1"
)

var _ v1.JobLister = &jobLister{}

var _ v1.JobNamespaceLister = &jobNamespaceLister{}

// jobLister implements the JobLister interface.
type jobLister struct {
	client           kubernetes.Interface
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewJobLister returns a new JobLister.
func NewJobLister(client kubernetes.Interface) v1.JobLister {
	return NewFilteredJobLister(client, nil)
}

func NewFilteredJobLister(client kubernetes.Interface, tweakListOptions internalinterfaces.TweakListOptionsFunc) v1.JobLister {
	return &jobLister{
		client:           client,
		tweakListOptions: tweakListOptions,
	}
}

// List lists all Jobs in the indexer.
func (s *jobLister) List(selector labels.Selector) (ret []*batch_v1.Job, err error) {
	listopt := meta_v1.ListOptions{
		LabelSelector: selector.String(),
	}
	if s.tweakListOptions != nil {
		s.tweakListOptions(&listopt)
	}
	list, err := s.client.BatchV1().Jobs(meta_v1.NamespaceAll).List(listopt)
	if err != nil {
		return nil, err
	}
	for i := range list.Items {
		ret = append(ret, &list.Items[i])
	}
	return ret, nil
}

func (s *jobLister) GetPodJobs(*core_v1.Pod) ([]batch_v1.Job, error) {
	return nil, nil
}

// Jobs returns an object that can list and get Jobs.
func (s *jobLister) Jobs(namespace string) v1.JobNamespaceLister {
	return jobNamespaceLister{client: s.client, tweakListOptions: s.tweakListOptions, namespace: namespace}
}

// jobNamespaceLister implements the JobNamespaceLister
// interface.
type jobNamespaceLister struct {
	client           kubernetes.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// List lists all Jobs in the indexer for a given namespace.
func (s jobNamespaceLister) List(selector labels.Selector) (ret []*batch_v1.Job, err error) {
	listopt := meta_v1.ListOptions{
		LabelSelector: selector.String(),
	}
	if s.tweakListOptions != nil {
		s.tweakListOptions(&listopt)
	}
	list, err := s.client.BatchV1().Jobs(s.namespace).List(listopt)
	if err != nil {
		return nil, err
	}
	for i := range list.Items {
		ret = append(ret, &list.Items[i])
	}
	return ret, nil
}

// Get retrieves the Job from the indexer for a given namespace and name.
func (s jobNamespaceLister) Get(name string) (*batch_v1.Job, error) {
	return s.client.BatchV1().Jobs(s.namespace).Get(name, meta_v1.GetOptions{})
}
